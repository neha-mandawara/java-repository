package array;

import java.util.Arrays;
import java.util.HashMap;

//https://leetcode.com/problems/two-sum/

public class FindTwoSum {

	public static void main(String[] args) {
		int[] arr = {2, 7, 11, 15};
		int target = 9;
		int[] ans = findTargetByAddingTwoNum(arr, target);
		System.out.println(Arrays.toString(ans));
	}

	public static int[] findTargetByAddingTwoNum(int[] arr, int target) {
		//output array size will be two, in question it is asking to add two numbers
		int[] ans = new int[2];
		
		for(int i = 0; i < arr.length-1; i++) {
			for(int j = i+1; j < arr.length; j++) {
				if(arr[i] + arr[j] == target) {
					ans[0] = i;
					ans[1] = j;
	 			}
			}
		}
		return ans;
		
		
		//Second way
//		
//		//taken hashMap to store unique values, as given in question, use one value once only
//		HashMap<Integer,Integer> map = new HashMap<Integer,Integer>();
//        int[] returnSet = {0,0};
//        for(int i = 0; i < arr.length;i++){
//        	
//        	//if any value match with Map value: means target - arr[i], so it means 
//        	//target = arr[i](from which we got map value) + map value
//        	//hence arr[i] index and map key is answer
//        	
//            if(map.containsKey(arr[i])){
//                returnSet[0] = map.get(arr[i]);
//                returnSet[1] = i;
//                return returnSet;
//            }
//            
//            //In map we are storing, target - arr[i], at index of arr[i] 
//            //so that later if we got any value match to map value, which is required to get target
//            //so we will return this arr[i] index that map value index in arr where it matched
//            map.put(target-arr[i],i);
//        }
//        return returnSet;
	}
		
		
}

//class Solution {
//    public int[] twoSum(int[] nums, int target) {
//        Map<Integer,Integer> mp = new HashMap<>();
//        int[] empty = {};
//        for(int i = 0 ; i < nums.length ; i++){
//            if(mp.containsKey(target - nums[i])){
//                int[] out ={mp.get(target - nums[i]) - 1,i};
//                return out;
//            }
//            mp.put(nums[i],i+1);
//        }
//        
//        return empty;
//    }
//}
