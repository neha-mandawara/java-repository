package array;

import java.util.Arrays;

//https://leetcode.com/problems/transpose-matrix/
//change whole row as column OR whole column as row, both means same only
public class TransposeMatrix {

	public static void main(String[] args) {
		int[][] arr = {{1,2,3},
						{4,5,6},
						{7,8,9}};
		int[][] ans = findTransposeMatrix(arr);
		for(int[] row: ans) {
			System.out.println(Arrays.toString(row));
		}
		
		//OR use deepToString function directly: directly used for 2D array print
//		System.out.println(Arrays.deepToString(arr));
	}

	public static int[][] findTransposeMatrix(int[][] arr) {
		//Array's first row length = new matrix length
		//because elements in one row's column, will become each element in each row
		//hence it will be the size of new matrix
		
//		int[][] ans = new int[arr[0].length][arr.length];
//		for(int row = 0; row < arr.length; row++) {
//			for(int col = 0; col < arr[row].length; col++) {
//				//ans[col][row], because for new array, row = arr's column and col = arr's row
//				ans[col][row] = arr[row][col];
//			}			
//		}
//		return ans;
		
		
		//IN PLACE- For Square Matrix
		//NOTE: in sqaure matrix, diagonal values will not change, they will be at their initial place only
		//Input
//		int[][] arr = {{1,2,3},
//						{4,5,6},
//						{7,8,9}};
	
		for(int i = 0; i < arr.length; i++) {
			for(int j = i + 1; j < arr.length; j++) {
				int temp = arr[i][j];
				arr[i][j] = arr[j][i];
				arr[j][i] = temp;
			}
		}
		return arr;
	}
}
